pragma language_version >= 0.14.0;

import CompactStandardLibrary;

export { Maybe };
export { CoinInfo };

export enum STATE { vacant, occupied };

witness local_secret_key(): Bytes<32>;

export sealed ledger reward_coin_color: Bytes<32>; 
export ledger reward: QualifiedCoinInfo; 
export ledger coin_received: QualifiedCoinInfo;  
export ledger tvl: Uint<64>;
export ledger receiver_public_key: Maybe<ZswapCoinPublicKey>;

export ledger state: STATE;
export ledger message: Maybe<Opaque<"string">>;
export ledger instance: Counter;
export ledger poster: Bytes<32>;

constructor(token_address: ContractAddress) {
    state = STATE.vacant;
    message = none<Opaque<"string">>();
    instance.increment(1);
    reward_coin_color = token_type(pad(32, "test_coin"), token_address);
}

export circuit post(new_message: Opaque<"string">): [] {
    assert state == STATE.vacant
        "Attempted to post to an occupied board";
    poster = disclose(public_key(local_secret_key(), instance as Field as Bytes<32>));
    message = some<Opaque<"string">>(new_message);
    state = STATE.occupied;       
}

export circuit take_down(): Opaque<"string"> {
    assert state == STATE.occupied
        "Attempted to take down post from an empty board";
    assert poster == public_key(local_secret_key(), instance as Field as Bytes<32>)
        "Attempted to take down post, but not the current poster";
    const former_msg = message.value;
    state = STATE.vacant;
    instance.increment(1);
    message = none<Opaque<"string">>();

    return former_msg;
}

export circuit charge(coin: CoinInfo): [] {
    receive(coin);
    // assert coin.value == 200 "requires 200 coins";
    assert coin.color == reward_coin_color "Invalid coin provided";    
    if (tvl == 0) {
        reward.write_coin(coin, right<ZswapCoinPublicKey, ContractAddress>(kernel.self()));
        tvl = tvl + coin.value as Uint<64>;
    } else {  
        coin_received.write_coin(coin, right<ZswapCoinPublicKey, ContractAddress>(kernel.self()));      
        const coin_sum = merge_coin(reward, coin_received);
        reward.write_coin(coin_sum, right<ZswapCoinPublicKey, ContractAddress>(kernel.self()));
        tvl = tvl + coin.value as Uint<64>;
    }    
    
    receiver_public_key = some<ZswapCoinPublicKey>(own_public_key());
}

export circuit withdraw(): [] {    
    const send_result = send(reward, left<ZswapCoinPublicKey, ContractAddress>(receiver_public_key.value), reward.value);  
    tvl = tvl - reward.value as Uint<64>; 
    if (tvl != 0) {
        reward.write_coin(send_result.change.value, right<ZswapCoinPublicKey, ContractAddress>(kernel.self()));
    }        
}

export circuit public_key(sk: Bytes<32>, instance: Bytes<32>): Bytes<32> {
    return persistent_hash<Vector<2, Bytes<32>>>([persistent_hash<Vector<2, Bytes<32>>>([pad(32, "bboard:pk:"), instance]), sk]);
}
